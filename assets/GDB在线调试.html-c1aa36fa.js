import{_ as e,W as i,X as t,Y as n,Z as a,$ as d,a1 as l,C as c}from"./framework-b57ab25f.js";const o="/assets/efe12be1ae4692e65d6d3e4f7a9b1453-78aa5de6.png",r="/assets/3ff7f58d28dbb88194b49f077d5dd4dd-62c4f7a8.png",p="/assets/ec19884a329f63a2b6ce29a0b431123a-78ce310e.png",u="/assets/96c6bd3ef82f3475845e75ea1a8d25b7-aa0e692c.png",g={},b=n("h1",{id:"gdb在线调试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gdb在线调试","aria-hidden":"true"},"#"),a(" GDB在线调试")],-1),v=n("h2",{id:"_1-获取gdb源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-获取gdb源码","aria-hidden":"true"},"#"),a(" 1. 获取GDB源码")],-1),m=n("em",null,"C++11",-1),h=n("strong",null,"gdb-7.12.1",-1),k={href:"http://ftp.gnu.org/gnu/gdb/",target:"_blank",rel:"noopener noreferrer"},f=l(`<h2 id="_2-编译gdb" tabindex="-1"><a class="header-anchor" href="#_2-编译gdb" aria-hidden="true">#</a> 2. 编译GDB</h2><p>为方便编译可将交叉编译工具路径添加到临时环境变量中,例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/projects/hnd/tools/rtl/msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827/bin/:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入到 <code>gdb-7.12.1</code> 目录下，使用对应平台的交叉编译工具在源码根目录下执行交叉编译gdb并安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--target</span><span class="token operator">=</span>mips-linux <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/home/lichenglong/gdbtest/install
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译生成的gdb可执行文件在配置的install目录下。</p><h2 id="_3-编译gdb-server" tabindex="-1"><a class="header-anchor" href="#_3-编译gdb-server" aria-hidden="true">#</a> 3. 编译GDB server</h2><p>进入到 <code>gdb/gdbserver</code> 目录下，执行交叉编译gdbserver：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure <span class="token parameter variable">--target</span><span class="token operator">=</span>mips-linux <span class="token parameter variable">--host</span><span class="token operator">=</span>mips-linux <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/home/lichenglong/gdbtest/install
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译生成的gdbserver在配置的install目录下。</p><p><strong>可能遇到的问题：</strong></p><p>编译 <code>linux-mips-low.c</code> 报错 MMLO 宏未定义，使用 <code>grep -r MMLO *</code> 命令查找宏在何处定义，发现是在其上级目录的 <code>mips-linux-tdep.h</code> 中定义，添加头文件包含后编译即可通过。</p><h2 id="_4-使用gdb进行调试" tabindex="-1"><a class="header-anchor" href="#_4-使用gdb进行调试" aria-hidden="true">#</a> 4. 使用GDB进行调试</h2><h3 id="_4-1-运行gdb-server" tabindex="-1"><a class="header-anchor" href="#_4-1-运行gdb-server" aria-hidden="true">#</a> 4.1 运行GDB server</h3><p>将gdbserver和要调试的可执行文件放到目标平台上(nfs、tftp)，执行命令运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./gdbserver ip:port 目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要调试的进程会由 <code>monitor</code> 自动拉起，需要先让其停止运行，再使用gdbserver拉起。</p><figure><img src="`+o+`" alt="停止进程" tabindex="0" loading="lazy"><figcaption>停止进程</figcaption></figure><p><strong>可能遇到的问题：</strong></p><p>运行gdbserver报错缺少运行库，如： libstdc++.so.6 。<br> 使用命令 <code>readelf -d gdbserver | grep NEEDED</code> 显示gdbserver运行所依赖的库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>~/gdbtest/gdb-7.12.1/gdb/gdbserver<span class="token punctuation">]</span>$ readelf <span class="token parameter variable">-d</span> gdbserver<span class="token operator">|</span> <span class="token function">grep</span> NEEDED
 0x00000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>                     Shared library: <span class="token punctuation">[</span>libdl.so.0<span class="token punctuation">]</span>
 0x00000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>                     Shared library: <span class="token punctuation">[</span>libstdc++.so.6<span class="token punctuation">]</span>
 0x00000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>                     Shared library: <span class="token punctuation">[</span>libm.so.0<span class="token punctuation">]</span>
 0x00000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>                     Shared library: <span class="token punctuation">[</span>libgcc_s.so.1<span class="token punctuation">]</span>
 0x00000001 <span class="token punctuation">(</span>NEEDED<span class="token punctuation">)</span>                     Shared library: <span class="token punctuation">[</span>libc.so.0<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在目标平台上查找必要的依赖库是否存在，若不存在则可以在交叉编译工具中查找相应的库文件，然后添加到目标平台中。</p><h3 id="_4-2-vscode启动调试" tabindex="-1"><a class="header-anchor" href="#_4-2-vscode启动调试" aria-hidden="true">#</a> 4.2 VSCode启动调试</h3><p>在linux环境下运行VSCode（或者使用ssh远程连接）， <strong>确保VSCode所在的环境与目标平台能互相ping通</strong> ，配置好 <code>launch.json</code> ，要使用目标平台上gdbserver配套的gdb进行调试。</p><figure><img src="`+r+'" alt="launch.json" tabindex="0" loading="lazy"><figcaption>launch.json</figcaption></figure><p>点击 <code>启动调试</code> ，即可连接到目标平台运行程序。</p><figure><img src="'+p+'" alt="点击启动调试.png" tabindex="0" loading="lazy"><figcaption>点击启动调试.png</figcaption></figure><p>建议先在代码中打上 <strong>断点</strong> ，避免开始调试后直接就运行过了需要调试的代码部分。</p><figure><img src="'+u+`" alt="调试过程.png" tabindex="0" loading="lazy"><figcaption>调试过程.png</figcaption></figure><p><strong>可能遇到的问题：</strong></p><p>程序直接运行完，断点不生效，可能是编译程序的时候没有加 <strong>-g</strong> 参数。</p><h2 id="_5-调试问题处理" tabindex="-1"><a class="header-anchor" href="#_5-调试问题处理" aria-hidden="true">#</a> 5. 调试问题处理</h2><ol><li><p>GDB无法加载源码</p><ul><li><p>使用gdb打开目标文件，输入 <code>l</code> ，如果打印 <code>No symbol table is loaded. Use the “file” command.</code> ， 则说明目标文件没有调试信息，需要增加 <code>-g</code> 编译选项重新编译(可在 <code>makefile.common</code> 的 <code>CFLAGS</code> 后添加)。如果加了 <code>-g</code> 仍然没有调试信息，注意看看Makefile中有没有加 <code>strip</code> 命令及其对应的宏，该命令会去掉可执行文件中的调试信息。</p></li><li><p>使用命令 <code>readelf 目标文件 -p .debug_str</code> ，会打印出源码路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ readelf netctrl.out <span class="token parameter variable">-p</span> .debug_str
String dump of section <span class="token string">&#39;.debug_str&#39;</span><span class="token builtin class-name">:</span>
<span class="token punctuation">[</span>     <span class="token number">0</span><span class="token punctuation">]</span>  swan_num
<span class="token punctuation">[</span>     <span class="token number">9</span><span class="token punctuation">]</span>  sin6_family
<span class="token punctuation">[</span>    <span class="token number">15</span><span class="token punctuation">]</span>  MULTIWAN_IE_BUTT
<span class="token punctuation">[</span>    <span class="token number">26</span><span class="token punctuation">]</span>  WLAN_5G_2
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">[</span>   <span class="token number">939</span><span class="token punctuation">]</span>  /work/lichenglong/MESH-ITB01/prod/agent/netctrl
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">[</span>  c185<span class="token punctuation">]</span>  upgrade_default_cfg
<span class="token punctuation">[</span>  c199<span class="token punctuation">]</span>  key_byte
<span class="token punctuation">[</span>  c1a2<span class="token punctuation">]</span>  crypt_decrypt_rc4
<span class="token punctuation">[</span>  c1b4<span class="token punctuation">]</span>  key_data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>launch.json</code> 修改源码路径，如 <a href="#42-vscode%E5%90%AF%E5%8A%A8%E8%B0%83%E8%AF%95">launch.json</a> 所示。</p></li></ul></li><li><p>博通方案启动调试异常</p><p>VSCode启动调试报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Loaded &#39;target:/lib/ld-linux.so.3&#39;. Symbols loaded.
ERROR: Unable to start debugging. Unrecognized format of field &quot;level&quot; in result: {level=-1,addr=0xb6fceb00,func=_start,args=[],from=target:/lib/ld-linux.so.3}
The program &#39;/home/licl/Desktop/bcm/a.out&#39; has exited with code 42 (0x0000002a).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行运行gdb报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Remote &#39;g&#39; packet reply is too long: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0feffbe0000000000ebfcbxb6fceb00 in _start () from target:/lib/ld-linux.so.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决办法：</p><p>通过搜索，原因是gdb在远程调试时，因为寄存器大小的切换，导致gdb出现的bug。修改gdb源码 <code>remote.c</code>，重新编译gdb即可解决，修改内容如下所示：</p><div class="language-patch line-numbers-mode" data-ext="patch"><pre class="language-patch"><code>/* Further sanity checks, with knowledge of the architecture.  */
-  if (buf_len &gt; 2 * rsa-&gt;sizeof_g_packet)
-    error (_(&quot;Remote &#39;g&#39; packet reply is too long: %s&quot;), rs-&gt;buf);
+  //if (buf_len &gt; 2 * rsa-&gt;sizeof_g_packet)
+  //  error (_(&quot;Remote &#39;g&#39; packet reply is too long: %s&quot;), rs-&gt;buf);
+
+    if(buf_len &gt; 2 * rsa-&gt;sizeof_g_packet) {
+        rsa-&gt;sizeof_g_packet = buf_len;
+        for(i = 0; i &lt; gdbarch_num_regs(gdbarch); i++){
+            if(rsa-&gt;regs-&gt;pnum == -1)
+               continue;
+            if(rsa-&gt;regs-&gt;offset &gt;= rsa-&gt;sizeof_g_packet)
+               rsa-&gt;regs-&gt;in_g_packet = 0;
+            else
+               rsa-&gt;regs-&gt;in_g_packet = 1;
+        }
+    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,33);function _(x,E){const s=c("ExternalLinkIcon");return i(),t("div",null,[b,v,n("p",null,[a("为防止交叉编译工具自带的gdb和gdbserver需要额外运行库而加大搭建调试环境的难度，使用gdb源码编译生成gdb和gdbserver进行调试；为避免交叉编译工具不支持 "),m,a(" 标准而导致编译报错，因此选择较老的版本，建议选择 "),h,a(" 版本。 "),n("a",k,[a("gdb源码下载地址"),d(s)])]),f])}const y=e(g,[["render",_],["__file","GDB在线调试.html.vue"]]);export{y as default};
